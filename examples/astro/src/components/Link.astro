---
import type { HTMLTag, Polymorphic } from "astro/types";

type Props<Tag extends HTMLTag> = Polymorphic<{ as: Tag }> & {
  disabled?: boolean;
  href?: string;
  target?: string;
  rel?: string;
  external?: boolean;
};

const {
  as: Element = "button",
  href,
  disabled,
  rel: _rel,
  target: _target,
  ...props
} = Astro.props;

const isExternal = (href || "").startsWith("http");
const target = _target ?? isExternal ? "_blank" : undefined;
const rel = _rel ?? isExternal ? "noopener noreferrer" : undefined;
---


{
  !href ? (
    <Element {disabled} class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-white transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-neutral-950 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 dark:ring-offset-neutral-950 dark:focus-visible:ring-neutral-300 h-10 px-4 py-2 bg-neutral-200 text-neutral-900 hover:bg-neutral-200/80 dark:bg-neutral-800 dark:text-neutral-50 dark:hover:bg-neutral-800/80" {...props}>
      <slot />
    </Element>
  ) : (
    <a
      href={!disabled ? href : undefined}
      aria-disabled={disabled ? "true" : undefined}
      role={disabled ? "link" : undefined}
      {rel}
      {target}
      class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-white transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-neutral-950 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 dark:ring-offset-neutral-950 dark:focus-visible:ring-neutral-300 h-10 px-4 py-2 bg-neutral-200 text-neutral-900 hover:bg-neutral-200/80 dark:bg-neutral-800 dark:text-neutral-50 dark:hover:bg-neutral-800/80"
      {...props}
    >
      <slot />
    </a>
  )
}
